buildscript {
    repositories {
        mavenCentral {
            content { excludeGroupByRegex "fi\\.vm\\.yti.*" }
        }
        jcenter {
            content { excludeGroupByRegex "fi\\.vm\\.yti.*" }
        }
    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.24.16')
    }
}

plugins {
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "org.springframework.boot" version "2.5.12"
    id "fi.evident.apina" version "0.16.0"
    id "org.sonarqube" version "3.3"
    id "org.owasp.dependencycheck" version "7.4.4"
    id "com.gorylenko.gradle-git-properties" version "2.3.1"
    id "com.github.ben-manes.versions" version "0.39.0"
}

apply plugin: 'com.jfrog.artifactory'
apply plugin: 'io.spring.dependency-management'

artifactoryPublish.skip = true

repositories {
    mavenLocal()
    mavenCentral {
        content { excludeGroupByRegex "fi\\.vm\\.yti.*" }
    }
    jcenter {
        content { excludeGroupByRegex "fi\\.vm\\.yti.*" }
    }

    // put your artifactory parameters to $HOME/.gradle/gradle.properties
    if (project.hasProperty('artifactoryUrl')) {
        maven {
            url "$artifactoryUrl"
            credentials {
                username "$artifactoryUsername"
                password "$artifactoryPassword"
            }
        }
    }
}

configurations {
    compile.exclude module: 'commons-logging'
}

sourceCompatibility = 11
targetCompatibility = 11

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2020.0.5'
    }
}

dependencies {

    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-devtools"
    compile 'org.springframework.boot:spring-boot-starter-jdbc'
    compile "org.springframework.boot:spring-boot-starter-tomcat"

    compile "org.springframework:spring-webmvc"
    compile "org.springframework:spring-tx"
    compile "org.springframework:spring-jdbc"
    compile "org.springframework:spring-context-support"

    compile "org.springframework.security:spring-security-core"
    compile "org.springframework.security:spring-security-config"
    compile "org.springframework.security:spring-security-web"
    compile "fi.vm.yti:yti-spring-security:0.2.0"

    compile "javax.xml.bind:jaxb-api:2.1"
    compile "io.jsonwebtoken:jjwt:0.9.1"

    compile "org.postgresql:postgresql:42.2.23"
    compile "org.dalesbred:dalesbred:1.3.4"
    compile "org.flywaydb:flyway-core"

    compile "com.fasterxml.jackson.core:jackson-databind"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"

    compile "org.jetbrains:annotations:22.0.0"

    compile "org.apache.httpcomponents:httpclient:4.5.13"

    compile "org.thymeleaf:thymeleaf"
    compile "org.thymeleaf:thymeleaf-spring5"

    compile "io.springfox:springfox-swagger2:3.0.0"
    compile "io.springfox:springfox-swagger-ui:3.0.0"

    compile group: 'javax.mail', name: 'javax.mail-api', version: '1.6.2'
    compile "org.springframework.boot:spring-boot-starter-mail"

    compile 'org.springframework.cloud:spring-cloud-starter-config'

    compile('org.springframework.cloud:spring-cloud-starter-sleuth')
    compileOnly "org.springframework.boot:spring-boot-configuration-processor"

    compile "ch.qos.logback:logback-core"
    compile "net.logstash.logback:logstash-logback-encoder:6.6"

    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.springframework:spring-test"
    testCompile "com.jayway.jsonpath:json-path:2.6.0"
    testCompile "org.testcontainers:postgresql:1.16.2"
    testCompile "org.testcontainers:junit-jupiter:1.16.2"
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.11'

    compile project(':frontend')
}

springBoot {
    mainClass = 'fi.vm.yti.groupmanagement.Main'
}

bootJar {
    dependsOn tasks.findByPath(":frontend:frontendJar")
    mainClass = 'fi.vm.yti.groupmanagement.Main'
    archiveFileName = 'yti-groupmanagement.jar'

    from zipTree(tasks.findByPath(":frontend:frontendJar").outputs.files.singleFile)
}

bootRun {
	systemProperties System.properties
}

sonarqube {
    properties {
        property "sonar.projectKey", "yti-groupmanagement-web-api"
        property "sonar.projectName", "yti-groupmanagement-web-api"
        property("sonar.dependencyCheck.reportPath", "$buildDir/reports/dependency-check-report.xml")
        property("sonar.dependencyCheck.htmlReportPath", "$buildDir/reports/dependency-check-report.html")
    }
}

dependencyCheck {
    format = 'ALL'
    autoUpdate = false
    analyzers {
        centralEnabled = false
    }
    data {
        directory = System.getenv('OWASP_DATA_DIR')
    }
}

apina {
    target = new File(project(":frontend").projectDir, 'src/app/apina.ts')
    blackBoxClasses = [/org\.dalesbred\..+/, /java\.time\..+/]
    enumMode = 'STRING_UNION'
    typeWriteMode = 'CLASS'
    endpoints = [/fi\.vm\.yti\.groupmanagement\.controller\..+/]
}

tasks.findByPath(":frontend:installDependencies").dependsOn apina

test {
    useJUnitPlatform()
}
